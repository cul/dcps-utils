from sheetFeeder import dataSheet
import datetime
from itertools import groupby
from pprint import pprint
import os

digest_sheet = '190p6gnhpakdYD72Eb1PLicdVlAtAxjQ7D_8oee7Tk1U'
digest_range = 'Sheet1!A:Z'

digest_sheet = dataSheet(digest_sheet, digest_range)


def main():

    # list = [['c', 3], ['a', 2], ['b', 1]]

    # list.sort(key=lambda x: x[1], reverse=True)
    # # print(sorted(list, key=lambda x: x[1]))

    # print(list)
    # quit()

    my_name = __file__
    script_name = os.path.basename(my_name)
    # This makes sure the script can be run from any working directory and still find related files.

    now = str(datetime.datetime.now().strftime('%m/%d/%Y %H:%M:%S'))

    print('This 24-hour digest composed at ' + now + ' by ' + script_name +
          '. Contact asops@library.columbia.edu with questions/problems.')

    print(' ')
    print(' ')

    x = get_digest()

    # Format the digest content.
    for s in x:
        print('*** OUTPUT FROM ' + s['script'] + ' ***')
        for m in s['msg']:
            print('â€¢ ' + m['value'])
        print(" ")

    # print('This 24-hour digest generated by ' + script_name + ' on ' +
    #       datetime.datetime.now().strftime('%m/%d/%Y %H:%M:%S') + '.')


def date_is_recent(_date, _offset=1):
    # check if input date is within 24 hours (or other day offset value) of current time.
    d_compare = (datetime.datetime.now() - datetime.timedelta(days=_offset))
    return _date > d_compare


def get_digest(sheet=digest_sheet):
    data = sheet.getData()
    # heads = data.pop(0)
    the_msg_data = []
    for a_row in data:
        name = a_row[0]
        date = datetime.datetime.strptime(a_row[1], '%m/%d/%Y %H:%M:%S')
        msg = a_row[2]
        # test date
        if date_is_recent(date):
            # if date == datetime.today().date():
            the_msg_data.append([name, date, msg])

    # the_msg_data.sort(key=lambda x: x[1], reverse=True)
    # TODO: Sort output reverse chronologically.

    # use itertools.groupby to compose results into lists of messages grouped by script name.
    the_result = []
    for key, group in groupby(sorted(the_msg_data), lambda x: x[0]):

        # Return a dict of values with timestamps grouped by script.
        r = {'script': key, 'msg': [
            {'time': m[1], 'value': m[2]} for m in group]}

        the_result.append(r)
        # Sort the results reverse chronologically.
        the_result.sort(key=lambda x: x['msg'][0]['time'], reverse=True)

    return the_result


def digest_clear(sheet=digest_sheet):
    post = sheet.clear()
    return post


def post_digest(script_name, log, sheet=digest_sheet):
    date = str(datetime.datetime.today())
    data = [[script_name, date, log]]
    post = sheet.appendData(data)
    return post


if __name__ == "__main__":
    main()
