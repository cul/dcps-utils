from sheetFeeder import dataSheet
import datetime
from itertools import groupby
from pprint import pprint
import os

digest_sheet = '190p6gnhpakdYD72Eb1PLicdVlAtAxjQ7D_8oee7Tk1U'
digest_range = 'Sheet1!A:Z'

digest_sheet = dataSheet(digest_sheet, digest_range)


def main():
    my_name = __file__
    script_name = os.path.basename(my_name)
    # This makes sure the script can be run from any working directory and still find related files.

    x = get_digest()

    # Format the digest content.
    for s in x:
        print('Output from ' + s['script'] + ': ')
        for m in s['msg']:
            print(m)
        print(" ")

    print('This 24-hour digest generated by ' + script_name + ' on ' +
          datetime.datetime.now().strftime('%m/%d/%Y %H:%M:%S') + '.')


def date_is_recent(_date, _offset=1):
    # check if input date is within 24 hours (or other day offset value) of current time.
    d_compare = (datetime.datetime.now() - datetime.timedelta(days=_offset))
    return _date > d_compare


def get_digest(sheet=digest_sheet):
    data = sheet.getData()
    heads = data.pop(0)
    the_msg_data = []
    for a_row in data:
        name = a_row[0]
        date = datetime.datetime.strptime(a_row[1], '%m/%d/%Y %H:%M:%S')
        msg = a_row[2]
        # test date
        if date_is_recent(date):
            # if date == datetime.today().date():
            the_msg_data.append([name, date, msg])
    # use itertools.groupby to compose results into lists of messages grouped by script name.
    the_result = []
    for key, group in groupby(sorted(the_msg_data), lambda x: x[0]):
        r = {'script': key, 'msg': [str(m[1]) + ': ' + m[2] for m in group]}
        # TODO: remove date in string once verified working.
        the_result.append(r)

    return the_result


def digest_clear(sheet=digest_sheet):
    post = sheet.clear()
    return post


def post_digest(script_name, log, sheet=digest_sheet):
    date = str(datetime.today())
    data = [[script_name, date, log]]
    post = sheet.appendData(data)
    return post


if __name__ == "__main__":
    main()
